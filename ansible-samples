# cat tasks.yml
---
- hosts: all
  tasks:
  - name: create a file in /tmp
    file:
      dest: /tmp/file
      state: '{{file_state}}'

# ansible-playbook -i inventory tasks.yml -e file_state=touch
# ansible-doc file


# cat inventory
"all": {
  "hosts": [
    "cos6",
    "cos62"
  ]





# cat inventory.sh
#!/bin/bash

if [ "$1" == "--list" ] ; then
cat<<EOF
{
"all": {
  "hosts": [
    "cos6",
    "cos62"
  ]
}
}
EOF
elif [ "$1" == "--host" ]; then
  echo '{"_meta": {"hostvars": {}}}'
else
  echo "{ }"
fi




# ansible-playbook -i ./inventory.sh tasks.yml -e file_state=absent
###Dynamic inventory

# ansible -m debug -i ./inventory -a "var=hostvars['cos6']" cos6





### Find all variables
# ansible -i inventory cos6 -m setup

# cat lineinfile.yml
---
- hosts: none
  tasks:
  - name: Remove host from /etc/hosts
    lineinfile: dest=/etc/hosts
              regexp="^192.168.56.101 .*devops"
              state=absent
    when: ansible_os_family == "Debian"




# cat lineinfile.yml
# ansible -i ./inventory all -m command -a "ip a"
---
- hosts: all
  tasks:
  - name: Add host in /etc/hosts
    lineinfile: dest=/etc/hosts
              line={{ item.line }}
              insertafter=EOF
              state=present
              backup=yes
    with_items:
    - { line: "192.168.56.101 devops.local devops" }
    - { line: "192.168.56.1 gw.local gw" }



# cat update-Debian-2.yml
---
- hosts:
    - ubuntu
  become: true
  tasks:
    - name: Upgrade packages
      apt: upgrade=dist

    - name: Check if a reboot is required
      register: reboot_required_file
      stat: path=/var/run/reboot-required get_md5=no

    - name: restart machine
      become: yes
      shell: sleep 2 && shutdown -r now "Ansible updates triggered"
      async: 1
      poll: 0
      ignore_errors: true
      when: reboot_required_file.stat.exists == true


    - name: Waiting for server to come back
      become: no
      local_action: wait_for
        port=22
        host={{ inventory_hostname }}
        search_regex=OpenSSH
        delay=10








# cat idempotent.yml
---
- hosts: all
  tasks:
  - name: an idempotent create command
    copy:
      src: idempotent.txt
      dest: /tmp/idempotent.txt
    tags:
      - create
  - name: an idempotent command
    lineinfile:
      dest: /tmp/idempotent.txt
      regexp: '^(.*)is an(.*)$'
      backrefs: true
      line: '\1is really an\2'
    tags:
      - create2
  - name: a non idempotent command
    shell: "echo this is a non-idempotent file >> /tmp/non-idempotent.txt"
    tags:
      - create3

  - name: remove the file we created
    file:
      path: "{{ item }}"
      state: absent
    with_items:
      - /tmp/idempotent.txt
      - /tmp/non-idempotent.txt
    tags:
      - destroy

# ansible-playbook -i ../inventory idempotent.yml --tags create
# ansible-playbook -i ../inventory idempotent.yml --tags create2
# ansible-playbook -i ../inventory idempotent.yml --tags create3
# ansible-playbook -i ../inventory idempotent.yml --tags destroy





# cat nginx-playbook.yaml
## Credits to John Lieske - https://www.ansible.com/blog/getting-started-writing-your-first-playbook
---
- name: Install nginx
  hosts: cos6
  become: true

  tasks:
  - name: Add epel-release repo
    environment:
        http_proxy: http://192.168.56.101:8080
        FTP_PROXY: http://192.168.56.101:8080
        ftp_proxy: http://192.168.56.101:8080
        HTTPS_PROXY: http://192.168.56.101:8080
        https_proxy: http://192.168.56.101:8080
        HTTP_PROXY: http://192.168.56.101:8080
    yum:
      name: epel-release
      state: present

  - name: Install nginx
    environment:
        http_proxy: http://192.168.56.101:8080
        FTP_PROXY: http://192.168.56.101:8080
        ftp_proxy: http://192.168.56.101:8080
        HTTPS_PROXY: http://192.168.56.101:8080
        https_proxy: http://192.168.56.101:8080
        HTTP_PROXY: http://192.168.56.101:8080
    yum:
      name: nginx
      state: present

##  - name: Insert Index Page
##    template:
##      src: index.html
##      dest: /usr/share/nginx/html/index.html

  - name: Start NGiNX
    service:
      name: nginx
      state: started


# ansible-playbook -i hosts nginx-playbook.yaml


# ansible -i hosts cos6 -m command -a "cat /etc/centos-release"
